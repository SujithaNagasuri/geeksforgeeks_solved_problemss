Segregate even and odd nodes in a Link List
Given a link list of size N, modify the list such that all the even numbers appear before all the odd numbers in the modified list. The order of appearance of numbers within each segregation should be same as that in the original list.

NOTE: Don't create a new linked list, instead rearrange the provided one.


Example 1:

Input: 
N = 7
Link List:
17 -> 15 -> 8 -> 9 -> 2 -> 4 -> 6 -> NULL

Output: 8 2 4 6 17 15 9

Explaination: 8,2,4,6 are the even numbers 
so they appear first and 17,15,9 are odd 
numbers that appear later.

class Solution{
    Node divide(int N, Node head)
    {
        ArrayList<Integer> even = new ArrayList<Integer>();
        ArrayList<Integer> odd = new ArrayList<Integer>();
        Node current = head;
        while(current != null)
        {
            if(current.data%2==0)
            {
                even.add(current.data);
            }
            else{
                odd.add(current.data);
            }
            current = current.next;
        }
        
        Node newhead = null;
        Node tail = null;
        even.addAll(odd);
        
        for(int i:even)
        {
            Node newnode = new Node(i);
            if(newhead == null)
            {
                newhead = newnode;
                tail = newnode;
            }
            else{
                tail.next = newnode;
                tail = newnode;
            }
        }
        
        return newhead;
        
    }
}
