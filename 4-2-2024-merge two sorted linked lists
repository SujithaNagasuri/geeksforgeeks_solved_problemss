Merge two sorted linked lists

Given two sorted linked lists consisting of N and M nodes respectively. The task is to merge both of the list (in-place) and return head of the merged list.
 

Example 1:

Input:
N = 4, M = 3 
valueN[] = {5,10,15,40}
valueM[] = {2,3,20}
Output: 2 3 5 10 15 20 40
Explanation: After merging the two linked
lists, we have merged list as 2, 3, 5,
10, 15, 20, 40.



class LinkedList
{
    //Function to merge two sorted linked list.
    Node sortedMerge(Node head1, Node head2)
    {
     // This is a "method-only" submission. 
     // You only need to complete this method
     ArrayList<Integer> arr = new ArrayList<Integer>();
     Node current = head1;
     while(current != null)
     {
         arr.add(current.data);
         current = current.next;
     }
     
     current = head2;
     while(current != null)
     {
         arr.add(current.data);
         current = current.next;
     }
     
     Collections.sort(arr);
     Node newhead = null;
     Node tail = null;
     for(int i:arr)
     {
         Node newnode = new Node(i);
         if(newhead == null)
         {
             newhead = newnode;
             tail = newnode;
         }
         else{
             tail.next = newnode;
             tail = newnode;
         }
     }
     
     return newhead;
   } 
}
